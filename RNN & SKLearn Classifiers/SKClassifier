import readTextFiles as rtf
import readCodeFiles as rcf
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.linear_model import SGDClassifier
from sklearn.svm import LinearSVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

def nbClassify(trainSet, trainCategories, testSet):
    """A MULTINOMINAL NB CLASSIFIER"""
    # Build a pipeline to simplify the process of creating the vector matrix, transforming to tf-idf and classifying
    text_clf = Pipeline([('vect', CountVectorizer(min_df=5)),('tfidf', TfidfTransformer()),('clf', MultinomialNB())])
    text_clf.fit(trainSet, trainCategories)
    predictions = text_clf.predict(testSet)
    return predictions

def sdgClassify(trainSet, trainCategories, testSet):
    """A LINEAR MODEL WITH STOCHASTIC GRADIENT DESCENT"""
    text_clf = Pipeline([('vect', CountVectorizer(min_df=5)),('tfidf', TfidfTransformer()),('clf', SGDClassifier())])
    text_clf.fit(trainSet, trainCategories)
    predictions = text_clf.predict(testSet)
    return predictions

def svcClassify(trainSet, trainCategories, testSet):
    """A SUPPORT VECTOR MACHINE CLASSIFIER"""
    text_clf = Pipeline([('vect', CountVectorizer(min_df=5)),('tfidf', TfidfTransformer()),('clf', LinearSVC())])
    text_clf.fit(trainSet, trainCategories)
    predictions = text_clf.predict(testSet)
    return predictions

def rfClassify(trainSet, trainCategories, testSet):
    """A RANDOM FOREST CLASSIFIER"""
    text_clf = Pipeline([('vect', CountVectorizer(min_df=5)),('tfidf', TfidfTransformer()),('clf', RandomForestClassifier(n_estimators=5))])
    text_clf.fit(trainSet, trainCategories)
    predictions = text_clf.predict(testSet)
    return predictions


# Test on text
xTrain, yTrain, xTest, yTest = rtf.getData()
nbPred = nbClassify(xTrain, yTrain, xTest)
nbAccuracy = accuracy_score(nbPred, yTest)

sdgPred = sdgClassify(xTrain, yTrain, xTest)
sdgAccuracy = accuracy_score(sdgPred, yTest)

svcPred = svcClassify(xTrain, yTrain, xTest)
svcAccuracy = accuracy_score(svcPred, yTest)

rfPred = rfClassify(xTrain, yTrain, xTest)
rfAccuracy = accuracy_score(rfPred, yTest)


# Test on code
x_train, y_train, x_test, y_test = rcf.getData()
nbPred1 = nbClassify(x_train, y_train, x_test)
nbAccuracy1 = accuracy_score(nbPred1, y_test)
# print(nbAccuracy1)

sdgPred1 = sdgClassify(x_train, y_train, x_test)
sdgAccuracy1 = accuracy_score(sdgPred1, y_test)

svcPred1 = svcClassify(x_train, y_train, x_test)
svcAccuracy1 = accuracy_score(svcPred1, y_test)

rfPred1 = rfClassify(x_train, y_train, x_test)
rfAccuracy1 = accuracy_score(rfPred1, y_test)
# print(rfAccuracy1)

print("NBC - ", "Text:", nbAccuracy, "Code: ", nbAccuracy1)
print("SDG - ", "Text:", sdgAccuracy, "Code: ", sdgAccuracy1)
print("SVC - ", "Text:", svcAccuracy, "Code: ", svcAccuracy1)
print("RFC - ", "Text:", rfAccuracy, "Code: ", rfAccuracy1)
