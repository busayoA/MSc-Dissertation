from matplotlib.pyplot import yticks
import readTextFiles as rtf
import readCodeFiles as rcf
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer, TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.linear_model import SGDClassifier
from sklearn.svm import LinearSVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# def nbClassify(trainSet, trainCategories, testSet):
#     """A MULTINOMINAL NB CLASSIFIER"""
#     # Build a pipeline to simplify the process of creating the vector matrix, transforming to tf-idf and classifying
#     text_clf = Pipeline([('vect', CountVectorizer(min_df=5)),('tfidf', TfidfTransformer()),('clf', MultinomialNB())])
#     # text_clf.fit(twenty_train.data, twenty_train.target)
#     text_clf.fit(trainSet, trainCategories)

#     # Evaluating the performance of the classifier

#     predictions = text_clf.predict(testSet)
#     return predictions


def svmClassify(trainSet, trainCategories, testSet):
    text_clf = Pipeline([('vect', CountVectorizer(min_df=5)),('tfidf', TfidfTransformer()),('clf', SGDClassifier())])
    text_clf.fit(trainSet, trainCategories)

    predictions = text_clf.predict(testSet)
    return predictions

def svcClassify(trainSet, trainCategories, testSet):
    text_clf = Pipeline([('vect', CountVectorizer(min_df=5)),('tfidf', TfidfTransformer()),('clf', LinearSVC())])
    text_clf.fit(trainSet, trainCategories)

    predictions = text_clf.predict(testSet)
    return predictions

# def rfClassify(trainSet, trainCategories, testSet):
#     text_clf = Pipeline([('vect', CountVectorizer(min_df=5)),('tfidf', TfidfTransformer()),('clf', RandomForestClassifier(n_estimators=5))])
#     text_clf.fit(trainSet, trainCategories)

#     predictions = text_clf.predict(testSet)
#     return predictions


# Test on text
xTrain, yTrain, xTest, yTest = rtf.getData()
# nbPred = nbClassify(xTrain, yTrain, xTest)
# nbAccuracy = accuracy_score(nbPred, yTest)
# print(nbAccuracy)
# print(classification_report(yTest, nbPred))
# print(confusion_matrix(yTest, nbPred))

svmPred = svmClassify(xTrain, yTrain, xTest)
svmAccuracy = accuracy_score(svmPred, yTest)

svcPred = svcClassify(xTrain, yTrain, xTest)
svcAccuracy = accuracy_score(svcPred, yTest)


# rfPred = rfClassify(xTrain, yTrain, xTest)
# rfAccuracy = accuracy_score(rfPred, yTest)
# print(rfAccuracy)


# Test on code
x_train, y_train, x_test, y_test = rcf.createTrainTestData()
# nbPred1 = nbClassify(x_train, y_train, x_test)
# nbAccuracy1 = accuracy_score(nbPred1, y_test)
# print(nbAccuracy1)

svmPred1 = svmClassify(x_train, y_train, x_test)
svmAccuracy1 = accuracy_score(svmPred1, y_test)

svcPred1 = svcClassify(x_train, y_train, x_test)
svcAccuracy1 = accuracy_score(svcPred1, y_test)

# rfPred1 = rfClassify(x_train, y_train, x_test)
# rfAccuracy1 = accuracy_score(rfPred1, y_test)
# print(rfAccuracy1)

print(svmAccuracy, svmAccuracy1)
print(svcAccuracy, svcAccuracy1)
